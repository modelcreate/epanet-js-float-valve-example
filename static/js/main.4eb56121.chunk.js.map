{"version":3,"sources":["components/SimpleChart/index.tsx","utils/floatValves.ts","utils/runModel.ts","App.tsx","utils/baseNetwork.ts","serviceWorker.ts","index.tsx"],"names":["observered","SmallChart","xLabel","yLabel","data","observeredData","map","timestep","i","x","y","theme","VictoryTheme","material","height","width","style","axisLabel","fontSize","padding","tickLabels","label","dependentAxis","stroke","labels","fill","textAnchor","floatValveCurve","getValveKValue","controlDepth","range","currentLevel","multiplier","valveOpenPercent","getValveOpenPercent","reduce","prev","curr","length","f","Math","pow","runModel","model","openH","initH","InitHydOption","NoSave","nodeIndex","getNodeIndex","linkIndex","getLinkIndex","tStep","Infinity","tankLevelData","tankLevel","getNodeValue","NodeProperty","Pressure","k","setLinkValue","LinkProperty","Setting","time","runH","push","nextH","closeH","ws","Workspace","Project","writeFile","open","App","useState","setRange","depth","setDepth","t0","performance","now","timeToRun","className","href","toFixed","htmlFor","type","id","name","min","max","step","onChange","e","Number","target","value","SimpleChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4aAcMA,EAAa,CACjB,KACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,OA+CaC,EA5C6C,SAAC,GAItD,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,KAEMC,EAAiBD,EAAKE,KAAI,SAACC,EAAUC,GAAX,MAAkB,CAChDC,EAAGF,EAASE,EACZC,EAAGV,EAAWQ,OAEhB,OACE,kBAAC,IAAD,CAAcG,MAAOC,IAAaC,SAAUC,OAAQ,IAAKC,MAAO,KAC9D,kBAAC,IAAD,CACEC,MAAO,CACLC,UAAW,CAAEC,SAAU,EAAGC,QAAS,IACnCC,WAAY,CAAEF,SAAU,EAAGC,QAAS,IAEtCE,MAAOnB,IAET,kBAAC,IAAD,CACEc,MAAO,CACLC,UAAW,CAAEC,SAAU,EAAGC,QAAS,IACnCC,WAAY,CAAEF,SAAU,EAAGC,QAAS,IAEtCG,eAAa,EACbD,MAAOlB,IAET,kBAAC,IAAD,CACEa,MAAO,CACLZ,KAAM,CAAEmB,OAAQ,WAChBC,OAAQ,CAAEC,KAAM,SAAUP,SAAU,GAAIQ,WAAY,UAEtDtB,KAAMA,IAGR,kBAAC,IAAD,CACEA,KAAMC,EACNW,MAAO,CACLZ,KAAM,CAAEmB,OAAQ,cCtJpBI,EAAkB,CACtB,CAAC,EAAG,mBACJ,CAAC,EAAK,MACN,CAAC,EAAK,KACN,CAAC,GAAM,MACP,CAAC,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","file":"static/js/main.4eb56121.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryTheme } from \"victory\";\n\nexport type SimpleGraphData = {\n  x: number;\n  y: number;\n}[];\n\ninterface SmallChartProperties {\n  xLabel: string;\n  yLabel: string;\n  data: SimpleGraphData;\n}\n\nconst observered = [\n  2.36,\n  2.362,\n  2.366,\n  2.369,\n  2.375,\n  2.38,\n  2.381,\n  2.385,\n  2.387,\n  2.387,\n  2.39,\n  2.39,\n  2.391,\n  2.392,\n  2.394,\n  2.393,\n  2.395,\n  2.396,\n  2.396,\n  2.393,\n  2.393,\n  2.388,\n  2.385,\n  2.38,\n  2.375,\n  2.367,\n  2.357,\n  2.338,\n  2.324,\n  2.32,\n  2.313,\n  2.313,\n  2.31,\n  2.311,\n  2.312,\n  2.318,\n  2.319,\n  2.325,\n  2.325,\n  2.325,\n  2.327,\n  2.329,\n  2.333,\n  2.33,\n  2.328,\n  2.332,\n  2.334,\n  2.339,\n  2.342,\n  2.341,\n  2.342,\n  2.342,\n  2.342,\n  2.34,\n  2.337,\n  2.338,\n  2.334,\n  2.332,\n  2.331,\n  2.331,\n  2.33,\n  2.332,\n  2.333,\n  2.332,\n  2.332,\n  2.332,\n  2.329,\n  2.324,\n  2.324,\n  2.331,\n  2.333,\n  2.337,\n  2.338,\n  2.335,\n  2.33,\n  2.328,\n  2.328,\n  2.331,\n  2.329,\n  2.329,\n  2.327,\n  2.326,\n  2.331,\n  2.334,\n  2.337,\n  2.335,\n  2.337,\n  2.343,\n  2.339,\n  2.342,\n  2.34,\n  2.34,\n  2.344,\n  2.347,\n  2.352,\n  2.359\n];\n\nconst SmallChart: FunctionComponent<SmallChartProperties> = ({\n  xLabel,\n  yLabel,\n  data\n}) => {\n  const observeredData = data.map((timestep, i) => ({\n    x: timestep.x,\n    y: observered[i]\n  }));\n  return (\n    <VictoryChart theme={VictoryTheme.material} height={175} width={400}>\n      <VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 }\n        }}\n        label={xLabel}\n      />\n      <VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 }\n        }}\n        dependentAxis\n        label={yLabel}\n      />\n      <VictoryLine\n        style={{\n          data: { stroke: \"#1528f7\" },\n          labels: { fill: \"#00000\", fontSize: 20, textAnchor: \"start\" }\n        }}\n        data={data}\n      />\n\n      <VictoryLine\n        data={observeredData}\n        style={{\n          data: { stroke: \"green\" }\n        }}\n      />\n    </VictoryChart>\n  );\n};\n\nexport default SmallChart;\n","const floatValveCurve = [\n  [0, 100000002004087000000.0],\n  [2.0, 10000000000.0],\n  [4.0, 100000.0],\n  [10.0, 5012.0],\n  [20.0, 1202.0],\n  [40.0, 250.0],\n  [60.0, 50.0],\n  [80.0, 10.0],\n  [100.0, 2.0]\n];\n\nfunction getValveKValue(\n  controlDepth: number,\n  range: number,\n  currentLevel: number,\n  multiplier: number\n): number {\n  const valveOpenPercent = getValveOpenPercent(\n    controlDepth,\n    range,\n    currentLevel\n  );\n\n  const k = floatValveCurve.reduce((prev, curr) => {\n    if (prev.length === 1) {\n      return prev;\n    }\n    if (valveOpenPercent === curr[0]) {\n      return [curr[1] * multiplier];\n    }\n    if (valveOpenPercent > curr[0]) {\n      return curr;\n    }\n\n    const f = (valveOpenPercent - prev[0]) / (curr[0] - prev[0]);\n\n    const calcK =\n      Math.pow(curr[1] * multiplier, f) * Math.pow(prev[1] * multiplier, 1 - f);\n    return [calcK];\n  }, floatValveCurve[0]);\n\n  return k[0];\n}\n\nfunction getValveOpenPercent(\n  controlDepth: number,\n  range: number,\n  currentLevel: number\n) {\n  if (currentLevel < controlDepth - range) {\n    return 100;\n  }\n  if (currentLevel > controlDepth) {\n    return 0;\n  }\n\n  return ((controlDepth - currentLevel) / range) * 100;\n}\n\nexport default getValveKValue;\n","import { Project, InitHydOption, NodeProperty, LinkProperty } from \"epanet-js\";\nimport { SimpleGraphData } from \"../components/SimpleChart\";\nimport getValveKValue from \"./floatValves\";\n\nconst runModel = (\n  model: Project,\n  controlDepth: number,\n  range: number,\n  multiplier: number\n): SimpleGraphData => {\n  model.openH();\n  model.initH(InitHydOption.NoSave);\n\n  const nodeIndex = model.getNodeIndex(\"Tank\");\n  const linkIndex = model.getLinkIndex(\"Res.1\");\n\n  let tStep = Infinity;\n  let tankLevelData: SimpleGraphData = [];\n  do {\n    const tankLevel = model.getNodeValue(nodeIndex, NodeProperty.Pressure);\n    const k = getValveKValue(controlDepth, range, tankLevel, multiplier);\n    model.setLinkValue(linkIndex, LinkProperty.Setting, k);\n\n    const time = model.runH();\n    //const flow = model.getLinkValue(linkIndex, LinkProperty.Flow);\n\n    tankLevelData.push({ x: time / 60 / 60, y: tankLevel });\n\n    tStep = model.nextH();\n  } while (tStep > 0);\n\n  model.closeH();\n\n  return tankLevelData;\n};\n\nexport default runModel;\n","import React, { useState, ChangeEvent } from \"react\";\nimport \"./App.css\";\nimport { Project, Workspace } from \"epanet-js\";\n\nimport SimpleChart from \"./components/SimpleChart\";\n\nimport { baseNetwork } from \"./utils/baseNetwork\";\nimport runModel from \"./utils/runModel\";\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nws.writeFile(\"net1.inp\", baseNetwork);\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\n\nconst App: React.FC = () => {\n  const [range, setRange] = useState(1);\n  const [depth, setDepth] = useState(2.5);\n\n  const handleRangeChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setRange(Number(e.target.value));\n  };\n\n  const handleDepthChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setDepth(Number(e.target.value));\n  };\n\n  const t0 = performance.now();\n  const tankLevelData = runModel(model, depth, range, 2);\n  const t1 = performance.now();\n\n  const timeToRun = t1 - t0;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Float Valve in epanet-js example</p>\n        <a className=\"App-link\" href=\"https://github.com/modelcreate/epanet-js\">\n          Learn more about epanet-js\n        </a>\n\n        <p>Model Ran in: {timeToRun.toFixed(0)}ms</p>\n      </header>\n      <p>\n        This is a work in progress demo of getting a float valve with continuous\n        regulation working in epanet-js.\n      </p>\n\n      <div>\n        <label htmlFor=\"depth\">Depth: {depth}</label>\n        <input\n          type=\"range\"\n          id=\"depth\"\n          name=\"depth\"\n          min=\"1.5\"\n          max=\"3.4\"\n          step={0.01}\n          onChange={handleDepthChange}\n          value={depth}\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"regRange\">Regulation Range: {range}</label>\n        <input\n          type=\"range\"\n          id=\"regRange\"\n          name=\"regRange\"\n          min=\"0.1\"\n          max=\"1\"\n          step={0.01}\n          onChange={handleRangeChange}\n          value={range}\n        />\n      </div>\n\n      <SimpleChart\n        xLabel=\"Time (hours)\"\n        yLabel=\"Depth (m)\"\n        data={tankLevelData}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export const baseNetwork = `[TITLE]\nFloat valves simulation in EPANET\n\n[JUNCTIONS]\n;ID              \tElev        \tDemand      \tPattern         \n 1              \t0         \t0           \t                \t;\n 2             \t103.2         \t0         \t                \t;\n 3              \t103.2         \t0         \t                \t;\n 4              \t0         \t0         \t                \t;\n\n\n[RESERVOIRS]\nRes 123.2\n\n[TANKS]\n;ID              \tElevation   \tInitLevel   \tMinLevel    \tMaxLevel    \tDiameter    \tMinVol      \tVolCurve\n Tank               \t100.0         \t2.36         \t0         \t3.2         \t9.12        \t0           \t                \t;\n\n[PIPES]\n;ID              \tNode1           \tNode2           \tLength      \tDiameter    \tRoughness   \tMinorLoss   \tStatus\n 1.2              1              \t  2              \t    1       \t150          \t0.01         \t0           \tOpen  \t;\n 3.Tank              3              \t  Tank             1       \t999          \t0.01         \t0           \tOpen  \t;\nTank.4   Tank 4 1 150 \t0.01         \t0           \tCV  \t;\n\n[VALVES]\n;ID              \tNode1           \tNode2           \tDiameter    \tType\tSetting     \tMinorLoss   \nRes.1 Res 1 100 TCV 5000 0.001\n2.3 2 3  100 PSV 0 0.001\n\n\n[DEMANDS]\n;Junction        \tDemand      \tPattern         \tCategory\n4 1.000000 4\n\n[PATTERNS]\n4\t2.0400\t1.8023\t1.7116\t1.7003\t1.5524\t1.5076\n4\t1.5524\t1.5188\t1.6208\t1.5076\t1.5076\t1.6208\n4\t1.5076\t1.4851\t1.4729\t1.4851\t1.4504\t1.5749\n4\t1.5412\t1.6657\t1.8023\t1.8584\t1.7911\t1.9717\n4\t2.2103\t2.3460\t3.1396\t3.7169\t2.9580\t3.4568\n4\t3.2640\t3.5476\t3.2069\t3.2303\t3.1171\t2.9804\n4\t2.6744\t2.9356\t3.0376\t2.8111\t2.6408\t2.6183\n4\t2.9356\t2.9917\t2.4817\t2.7091\t2.2777\t2.4704\n4\t2.4143\t2.5837\t2.4704\t2.4592\t2.7091\t2.7428\n4\t2.4817\t2.7540\t2.8448\t2.8223\t2.7316\t2.6857\n4\t2.7316\t2.5837\t2.6408\t2.7540\t2.6520\t2.7877\n4\t3.1957\t2.9356\t2.2889\t2.4480\t2.4704\t2.4368\n4\t2.7989\t2.9131\t2.9804\t2.6071\t2.7316\t2.6744\n4\t2.7091\t2.8897\t2.7091\t2.5949\t2.5051\t2.2216\n4\t2.7652\t2.5388\t2.2777\t2.5388\t2.3460\t2.5163\n4\t2.6520\t2.2103\t2.2664\t1.9951\t1.8472\t1.6208\n\n\n[TIMES]\nPattern Timestep 0:15\nDuration 23:45:00\nHydraulic Timestep 0:15\nQuality Timestep 0:15\nPattern Start 0:00\nReport Timestep 0:15\nReport Start 0:00\nStart ClockTime 12:00 AM\nStatistic None\n\n[OPTIONS]\nUnits LPS\nHeadloss D-W\nTrials 500\nAccuracy 0.01\nUNBALANCED CONTINUE 999\n\n\n\n[END]`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}